<div class="col-md-6">
							<div class="panel panel-default">
								<div class="panel-body">
									<div class="heading_b">Timeline</div>
									<div class="row">										
										<div class="col-md-12">
											<div id="flot_browsers" class="" style="width:100%">
												<div id="timeline"></div>
												<script>

												var margin = {top: 30, right: 20, bottom: 35, left: 50},
												  //width = 600 - margin.left - margin.right,
												  //height = 400 - margin.top - margin.bottom;
												  width=300
												  height=320

												var parseDate = d3.time.format("%H:%M").parse;

												var x = d3.time.scale().range([0, width]);
												var y = d3.scale.linear().range([height, 0]);

												var xAxis = d3.svg.axis()
												    .scale(x)
												    .orient("bottom")
												    .ticks(15);

												var yAxis = d3.svg.axis()
												    .scale(y)
												    .orient("left")
												    .ticks(5);

												var area = d3.svg.area()
												    .x(function(d) { return x(d.Time_HrMin); })
												    .y0(height)
												    .y1(function(d) { return y(d.number_of_distinct_orders); });

												var valueline = d3.svg.line()
												    .x(function(d) { return x(d.Time_HrMin); })
												    .y(function(d) { return y(d.number_of_distinct_orders); });
												    
												var svg = d3.select("#timeline")
												    .append("svg")
												        .attr("width", width + margin.left + margin.right)
												        .attr("height", 300)
												    .append("g")
												        .attr("transform", 
												              "translate(" + margin.left + "," + margin.top + ")");

												// function for the x grid lines
												function make_x_axis() {
												    return d3.svg.axis()
												        .scale(x)
												        .orient("bottom")
												        .ticks(5)
												}

												// function for the y grid lines
												function make_y_axis() {
												  return d3.svg.axis()
												      .scale(y)
												      .orient("left")
												      .ticks(5)
												}

												// Get the data
												d3.csv("<%= disp_data.timeframe_csv %>", function(error, data)
												 {
												    data.forEach(function(d) {
												        d.Time_HrMin = parseDate(d.Time_HrMin);
												        d.close = +d.number_of_distinct_orders;
												    });

												    // Scale the range of the data
												    x.domain(d3.extent(data, function(d) { return d.Time_HrMin; }));
												    y.domain([0, d3.max(data, function(d) { return d.number_of_distinct_orders; })]);

												    // Add the filled area
												    svg.append("path")
												        .datum(data)
												        .attr("class", "area")
												        .attr("d", area);

												    // Draw the x Grid lines
												    svg.append("g")
												        .attr("class", "grid")
												        .attr("transform", "translate(0," + height + ")")
												        .call(make_x_axis()
												            .tickSize(-height, 0, 0)
												            .tickFormat("")
												        )

												    // Draw the y Grid lines
												    svg.append("g")            
												        .attr("class", "grid")
												        .call(make_y_axis()
												            .tickSize(-width, 0, 0)
												            .tickFormat("")
												        )

												    // Add the valueline path.
												    svg.append("path")
												        .attr("d", valueline(data));

												    // Add the X Axis
												    svg.append("g")
												        .attr("class", "x axis")
												        .attr("transform", "translate(0," + height + ")")
												        .call(xAxis)
												        .selectAll("text")	
										            .style("text-anchor", "end")
										            .attr("dx", "-.8em")
										            .attr("dy", ".15em")
										            .attr("transform", function(d) {
										                return "rotate(-65)" 
										                });


												    // Add the Y Axis
												    svg.append("g")
												        .attr("class", "y axis")
												        .call(yAxis);

												    // Add the text label for the X axis
												    svg.append("text")
												        .attr("transform",
												              "translate(" + (width/2) + " ," + 
												                             (height+margin.bottom) + ")")
												        .attr("x", -15)
												        .attr("y", 10)
												        .style("text-anchor", "middle")
												        .text("Time_HrMin");

												    // Add the white background to the y axis label for legibility
												    /*svg.append("text")
												        .attr("transform", "rotate(-90)")
												        .attr("y", -45)
												        .attr("x", margin.top - (height / 2))
												        .attr("dy", ".71em")
												        .style("text-anchor", "end")
												        .attr("class", "shadow")
												        .text("Price");*/

												    // Add the text label for the Y axis
												    svg.append("text")
												        .attr("transform", "rotate(-90)")
												        .attr("y", -45)
												        .attr("x", margin.top - (height / 2))
												        .attr("dy", ".71em")
												        .style("text-anchor", "end")
												        .text("No of distint orders");

												    // Add the title
												    /*svg.append("text")
												        .attr("x", (width / 2))     
												        .attr("y", 0 - (margin.top / 2))
												        .attr("text-anchor", "middle")
												        .style("font-size", "16px")
												        .style("text-decoration", "underline")
												        .text("Price vs Date Graph");*/

												});

												</script>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>